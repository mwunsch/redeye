%% name = Redeye::Grammar

%% {
  def block_node(nodes)
    Redeye::Nodes::Block.new(nodes)
  end

  def literal_node(value)
    Redeye::Nodes::Literal.new(value)
  end

  def value_node(value)
    Redeye::Nodes::Value.new(value)
  end

  def assign_node(variable, value)
    Redeye::Nodes::Assign.new(variable, value)
  end
}

      root = - expression:exp? - !. ~block_node(exp)

expression = assignment
           | value

assignment = assignable:var - "=" - value:val ~assign_node(var, val) 

     value = assignable
           | literal:val ~value_node(val)

assignable = identifier:val ~value_node(val)

   literal = number
           | string

identifier = < IDENTIFIER > ~literal_node(text)

    string = < SIMPLSTRING > ~literal_node(text)
           | < "\"" STRING "\"" > ~literal_node(text)

    number = < NUMBER > ~literal_node(text)

         - = WHITESPACE*

    STRING = /[^\\"]*(?:\\.[^\\"]*)*/
    SIMPLSTRING = /'[^\\']*(?:\\.[^\\']*)*'/
    NUMBER = /\d*\.?\d+(?:e[+-]?\d+)?/
IDENTIFIER = /([a-zA-Z_][a-zA-Z0-9_]*)([^\n\S]*:(?!:))?/
WHITESPACE = /[^\n\S]/
